- name: Check if networks are already configured
  environment:
    KUBECONFIG: "{{ kubeconfig_file }}"
  shell: |
    oc get networks.operator.openshift.io/cluster --template={{.spec.additionalNetworks}}
  register: bridge_network

- name: Configure bridges and networks
  block:    
    - name: Generate Node Network Configuration Policy yaml file
      template:
        src: bigip-bridges.yaml.j2
        dest: "{{ bigip_tempdir.path }}/bigip-bridges.yaml"

    - name: Create Node Network Configuration Policy
      environment:
        KUBECONFIG: "{{ kubeconfig_file }}"
      shell: |
        oc apply -f {{ bigip_tempdir.path }}/bigip-bridges.yaml

    - name: Patch network operator with bridge networks
      environment:
        KUBECONFIG: "{{ kubeconfig_file }}"
      shell: |
        oc patch networks.operator.openshift.io/cluster --type='merge' -p "$(cat <<- EOF
        spec:
          additionalNetworks:
          - name: bigip-mgmt
            namespace: {{ bigip_namespace }}
            rawCNIConfig: '{ "cniVersion": "0.3.1", "type": "bridge", "bridge": "bigip-mgmt",
              "ipMasq": false, "isGateway": false, "isDefaultGateway": false, "forceAddress":
              false, "hairpinMode": false,"promiscMode":false }'
            type: Raw
          - name: bigip-ha
            namespace: {{ bigip_namespace }}
            rawCNIConfig: '{ "cniVersion": "0.3.1", "type": "bridge", "bridge": "bigip-ha",
              "ipMasq": false, "isGateway": false, "isDefaultGateway": false, "forceAddress":
              false, "hairpinMode": false,"promiscMode":false }'
            type: Raw
        EOF
        )"

  when: ( "'bigip-mgmt' not in bridge_network.stdout" ) or ( "'bigip-ha' not in bridge_network.stdout" )